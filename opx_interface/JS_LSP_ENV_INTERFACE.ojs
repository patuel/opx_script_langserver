/*
 * Environment definition interface for the language server
 *
 * This REST interface will provide object definitions for hover support
 */

function Lsp_IInterfaceResult() {}

function Lsp_Mapper(sLabelAttribute, vxAttributeList) {
    this.sLabelAttribute = sLabelAttribute;
    this.vxAttributeList = vxAttributeList;
}

method lsp_map on Lsp_Mapper(result, obj) {
    result.LABEL = obj.get(this.sLabelAttribute);
    for (var xAttribute in this.vxAttributeList) {
        if (xAttribute instanceof function) {
            xAttribute.call(this, result, obj);
        } else {
            result.set(xAttribute, obj.get(xAttribute));
        }
    }
}

/**
 * Mapper function for Attribute type possible values
 */
method lsp_NatMapper on Lsp_Mapper(result, obj) {
    var hsValueMap = new HashTable("string");

    for (var oPossibleValue in obj.get("POSSIBLE_VALUES")) {
        hsValueMap.set(oPossibleValue.VALUE, oPossibleValue.get("COMMENT"));
    }

    result.set("POSSIBLE_VALUES", hsValueMap);
}

function lsp_searchObject(sName) {
    var vxResults = new Vector();

    for (var obj in "OpxAdditionalAttribute".findClass() where obj.NAME.search(sName) != false) {
        vxResults.push(obj);
    }
    for (var obj in "OpxBreakdownStructure".findClass() where obj.NAME.search(sName) != false) {
        vxResults.push(obj);
    }
    for (var obj in "OpxAttributeType".findClass() where obj.NAME.search(sName) != false) {
        vxResults.push(obj);
    }
    for (var obj in "OpxDataManagementRule".findClass() where obj.NAME.search(sName) != false) {
        vxResults.push(obj);
    }
    // for (var obj in "OpxDocumentField".findClass() where obj.NAME.search(sName) != false) {
    //     vxResults.push(obj);
    // }
    // for (var obj in "OpxDocumentStorage".findClass() where obj.NAME.search(sName) != false) {
    //     vxResults.push(obj);
    // }
    for (var obj in "OpxNamedFormula".findClass() where obj.NAME.search(sName) != false) {
        vxResults.push(obj);
    }
    for (var obj in "OpxPersistentTable".findClass() where obj.NAME.search(sName) != false) {
        vxResults.push(obj);
    }
    for (var obj in "OpxRelationAttribute".findClass() where obj.NAME.search(sName) != false) {
        vxResults.push(obj);
    }
    for (var obj in "OpxSymbolicField".findClass() where obj.NAME.search(sName) != false) {
        vxResults.push(obj);
    }
    // for (var obj in "OpxTableKey".findClass() where obj.NAME.search(sName) != false) {
    //     vxResults.push(obj);
    // }
    for (var obj in "OpxTemporaryTable".findClass() where obj.NAME.search(sName) != false) {
        vxResults.push(obj);
    }
    // for (var obj in "OpxVirtualConsolidationClass".findClass() where obj.NAME.search(sName) != false) {
    //     vxResults.push(obj);
    // }

    return vxResults;
}

var HSOBJECTMAPPER = new HashTable("string");
HSOBJECTMAPPER.set("ADDED_ATTRIBUTE",       new Lsp_Mapper("LABEL", new Vector("ENTITY", "TYPE")));
HSOBJECTMAPPER.set("BREAKDOWN_STRUCTURE",   new Lsp_Mapper("LABEL", new Vector()));
HSOBJECTMAPPER.set("NAT",                   new Lsp_Mapper("LABEL", new Vector(lsp_NatMapper.closure())));
HSOBJECTMAPPER.set("DATA_CONSISTENCY_RULE", new Lsp_Mapper("LABEL", new Vector("COMMENT")));
HSOBJECTMAPPER.set("FORMULA",               new Lsp_Mapper("LABEL", new Vector("ENTITY", "VALUE", "TYPE")));
HSOBJECTMAPPER.set("PERMANENT_TABLE",       new Lsp_Mapper("LABEL", new Vector("DESC")));
HSOBJECTMAPPER.set("ATTRIBUTE_RELATION",    new Lsp_Mapper("LABEL", new Vector(
    "ENTITIY",
    "TYPE",
    "RELATION_NAME",
    "OPTINOAL",
    "SAVE_WITH",
    "TREE_GROUP_POSSIBLE",
    "ALLOW_EXTERNAL_LINKS",
    "USE_FOR_INDEX"
)));
HSOBJECTMAPPER.set("SYMBOLIC_FIELD",        new Lsp_Mapper("LABEL", new Vector()));
HSOBJECTMAPPER.set("TEMP_TABLE",            new Lsp_Mapper("LABEL", new Vector("DESC")));

/**
 * Converts any OpxEnironmentObject into a lsp readable object
 */
function lsp_toInterfaceObject() {
    var oResult = new Lsp_IInterfaceResult();

    oResult.ONB = this.ONB;
    // oResult.ID = this.ID;
    oResult.NAME = this.NAME;

    var sClassName = this.CLASS.toString();
    oResult.CLASS = sClassName.toUpperCase();

    var oMapper = HSOBJECTMAPPER.get(sClassName);
    if (oMapper instanceof Lsp_Mapper) {
        oMapper.lsp_map(oResult, this);
    }

    return oResult;
}

/**
 * Searches for an environment object by name
 * @param {string} sName Name of the environment object
 * @return {any} The found object or undefined
 */
function lsp_getEnvDefinition(sName) {
    try {
        var voFoundObjects = lsp_searchObject(sName);
        if (voFoundObjects.length > 0) {
            for (var oFoundObject in voFoundObjects) {
                return oFoundObject.lsp_toInterfaceObject();
            }
        }
    } catch (error e) {
        return (e);
    }
    return null;
}

/* Target URL:
 * /opx_lsp?<name>
 */
rest.defineapi("opx_lsp", lsp_getEnvDefinition);